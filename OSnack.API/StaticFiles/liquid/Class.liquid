{% if HasDescription -%}
/** {{ Description }} */
{% endif -%}
export {% if IsAbstract %}abstract {% endif %}class {{ ClassName }}{{ Inheritance }} {
{% for property in Properties -%}
{%   if property.HasDescription -%}
    /** {{ property.Description }} */
{%   endif -%}
    {% if property.IsReadOnly %}readonly {% endif %}{{ property.PropertyName }}{% if property.IsOptional %}?{% elseif property.HasDefaultValue %}{% else %}!{% endif %}: {{ property.Type }}{{ property.TypePostfix }}{% if property.HasDefaultValue %} = {{property.DefaultValue}}{% endif %};
{% endfor -%}
{% if HasIndexerProperty -%}

    [key: string]: {{ IndexerPropertyValueType }}; 
{% endif -%}
{% if HasDiscriminator -%}

    protected _discriminator: string;
{% endif -%}

{% if GenerateConstructorInterface or HasBaseDiscriminator -%}
    constructor({% if GenerateConstructorInterface %}data?: I{{ ClassName }}{% endif %}) {
{%     if HasInheritance -%}
        super({% if GenerateConstructorInterface %}data{% endif %});
{%     endif -%}
{%     if GenerateConstructorInterface and (HasInheritance == false or ConvertConstructorInterfaceData) -%}
        if (data) {
{%         if HasInheritance == false -%}
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
{%         endif -%}
{%         if ConvertConstructorInterfaceData -%}
{%             for property in Properties -%}
{%                 if property.SupportsConstructorConversion -%}
{%                     if property.IsArray -%}
            if (data.{{ property.PropertyName }}) {
                this.{{ property.PropertyName }} = [];
                for (let i = 0; i < data.{{ property.PropertyName }}.length; i++) {
                    let item = data.{{ property.PropertyName }}[i];
                    this.{{ property.PropertyName }}[i] = item && !(<any>item).toJSON ? new {{ property.ArrayItemType }}(item) : <{{ property.ArrayItemType }}>item;
                }
            }
{%                     elseif property.IsDictionary -%}
            if (data.{{ property.PropertyName }}) {
                this.{{ property.PropertyName }} = {};
                for (let key in data.{{ property.PropertyName }}) {
                    if (data.{{ property.PropertyName }}.hasOwnProperty(key)) {
                        let item = data.{{ property.PropertyName }}[key];
                        this.{{ property.PropertyName }}[key] = item && !(<any>item).toJSON ? new {{ property.DictionaryItemType }}(item) : <{{ property.DictionaryItemType }}>item;
                    }
                }
            }
{%                     else -%}
            this.{{ property.PropertyName }} = data.{{ property.PropertyName }} && !(<any>data.{{ property.PropertyName }}).toJSON ? new {{ property.Type }}(data.{{ property.PropertyName }}) : <{{ property.Type }}>this.{{ property.PropertyName }}; 
{%                     endif -%}
{%                 endif -%}
{%             endfor -%}
{%         endif -%}
        }
{%     endif -%}
{%     if HasDefaultValues -%}
        {% if GenerateConstructorInterface %}if (!data) {% endif %}{
{%         for property in Properties -%}
{%             if property.HasDefaultValue -%}
            this.{{ property.PropertyName }} = {{ property.DefaultValue }};
{%             endif -%}
{%         endfor -%}
        }
{%     endif -%}
{%     if HasBaseDiscriminator -%}
        this._discriminator = "{{ DiscriminatorName }}";
{%     endif -%}
    }
{% endif -%}
}